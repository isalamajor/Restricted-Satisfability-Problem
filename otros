
    # Restricción 3: Tareas de mantenimiento
    for avion_id, tipo, restr, t1, t2 in aviones:
        t1, t2 = int(t1), int(t2)
        
        if t2 > 0:
            vars = [f"{avion_id}_franja_{franja}" for franja in franjas_horarias]
            problem.addConstraint(
                lambda *assignments: sum(1 for a in assignments if a in talleres_spc) >= t2, 
                vars
            )


    
    # Restricción 4: las tareas tipo 2 deben hacerse primero si el avión es de rest 'T'
    def verificar_orden_tareas(asignaciones, t1, t2):
        """
        Verifica que las tareas especializadas (tipo 2) se realicen antes que las tareas estándar (tipo 1)
        """
        # Las primeras t2 franjas deben ser asignadas a talleres SPC
        for i in range(t2):
            if asignaciones[i] not in talleres_spc:
                return False  # Si alguna tarea SPC no está en un taller SPC, no cumple la restricción
        
        return True  
    
    for avion_id, tipo, restr, t1, t2 in aviones:
        t1, t2 = int(t1), int(t2) 
        
        if restr == 'T' and t2 > 0:  

            vars_avion = [f"{avion_id}_franja_{franja}" for franja in franjas_horarias]
            
            '''problem.addConstraint(
                verificar_orden_tareas,  
                vars_avion + [t1, t2]  # Pasamos los talleres SPC, t1, y t2 como argumentos
            ) '''       

    
    # Restricción 5 y 6: Maniobrabilidad y adyacencia
    '''for franja in franjas_horarias:
        for taller in talleres['STD'] + talleres['SPC'] + talleres['PRK']:
            adjacentes = [
                (taller[0] - 1, taller[1]), (taller[0] + 1, taller[1]),
                (taller[0], taller[1] - 1), (taller[0], taller[1] + 1)
            ]
            adjacentes = [a for a in adjacentes if a in talleres['STD'] + talleres['SPC'] + talleres['PRK']]
            def adjacency_constraint(*assignments):
                return all(a not in adjacentes for a in assignments)
            
            variables = [f"{avion_id}_franja_{franja}" for avion_id in avion_ids]
            #problem.addConstraint(adjacency_constraint, variables)'''
    



4
5x5
STD:(0,1) (1,0) (1,1) (1,2) (1,3) (2,0) (2,2) (3,3) (4,1) (4,2)
SPC:(0,3) (2,1) (2,3) (3,0) (4,3)
PRK:(0,0) (0,2) (0,4) (1,4) (2,4) (3,1) (3,2) (3,4) (4,0) (4,4)
1-JMB-T-2-2
2-STD-F-1-3
3-STD-F-3-0
4-JMB-T-1-1
5-STD-F-2-2
